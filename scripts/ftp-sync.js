import { Client } from "basic-ftp"
import fs from "fs"
import path from "path"
import { DOMParser } from "xmldom"
import pkg from "pg"
const { Pool } = pkg

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: process.env.NODE_ENV === "production" ? { rejectUnauthorized: false } : false,
})

class FTPSync {
  constructor(config) {
    this.config = config
    this.client = new Client()
    this.tempDir = "./temp"

    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (!fs.existsSync(this.tempDir)) {
      fs.mkdirSync(this.tempDir, { recursive: true })
    }
  }

  async connect() {
    try {
      await this.client.access({
        host: this.config.host,
        port: this.config.port || 21,
        user: this.config.username,
        password: this.config.password,
        secure: false,
      })
      console.log("‚úÖ FTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
      return true
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ FTP:", error.message)
      return false
    }
  }

  async checkForNewFiles() {
    try {
      const files = await this.client.list(this.config.directory || "/")
      const xmlFiles = files.filter(
        (file) => file.name.toLowerCase().endsWith(".xml") && file.type === 1 && !file.name.startsWith("processed_"),
      )

      console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${xmlFiles.length} –Ω–æ–≤—ã—Ö XML —Ñ–∞–π–ª–æ–≤`)
      return xmlFiles
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤:", error.message)
      return []
    }
  }

  async downloadFile(filename) {
    try {
      const remotePath = `${this.config.directory}/${filename}`
      const localPath = path.join(this.tempDir, filename)

      await this.client.downloadTo(localPath, remotePath)
      console.log(`‚¨áÔ∏è –§–∞–π–ª ${filename} –∑–∞–≥—Ä—É–∂–µ–Ω`)
      return localPath
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ ${filename}:`, error.message)
      return null
    }
  }

  async parseXMLFile(filePath) {
    try {
      const xmlContent = fs.readFileSync(filePath, "utf8")
      const parser = new DOMParser()
      const xmlDoc = parser.parseFromString(xmlContent, "text/xml")

      const offers = xmlDoc.getElementsByTagName("offer")
      const products = []

      for (let i = 0; i < offers.length; i++) {
        const offer = offers[i]
        const sku = offer.getAttribute("sku")
        const group1 = offer.getAttribute("group1")
        const group2 = offer.getAttribute("group2")

        const name = offer.getElementsByTagName("name")[0]?.textContent
        const priceText = offer.getElementsByTagName("price")[0]?.textContent
        const stockText = offer.getElementsByTagName("ostatok")[0]?.textContent

        if (sku && name) {
          products.push({
            sku,
            name,
            category1: group1 || "",
            category2: group2 || "",
            price: Number.parseFloat(priceText?.replace(/\s/g, "") || "0"),
            stock: Number.parseFloat(stockText || "0"),
          })
        }
      }

      console.log(`üì¶ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ XML`)
      return products
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ XML:", error.message)
      return []
    }
  }

  async saveProductsToDatabase(products, filename) {
    const client = await pool.connect()

    try {
      await client.query("BEGIN")

      let importedCount = 0
      let errorCount = 0

      for (const product of products) {
        try {
          await client.query(
            `
            INSERT INTO products (sku, name, category1, category2, price, stock)
            VALUES ($1, $2, $3, $4, $5, $6)
            ON CONFLICT (sku) 
            DO UPDATE SET 
              name = EXCLUDED.name,
              category1 = EXCLUDED.category1,
              category2 = EXCLUDED.category2,
              price = EXCLUDED.price,
              stock = EXCLUDED.stock,
              updated_at = CURRENT_TIMESTAMP
          `,
            [product.sku, product.name, product.category1, product.category2, product.price, product.stock],
          )

          importedCount++
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ ${product.sku}:`, error.message)
          errorCount++
        }
      }

      // –õ–æ–≥–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç
      await client.query(
        `
        INSERT INTO import_logs (filename, products_imported, status, error_message)
        VALUES ($1, $2, $3, $4)
      `,
        [
          filename,
          importedCount,
          errorCount > 0 ? "partial" : "success",
          errorCount > 0 ? `–û—à–∏–±–æ–∫: ${errorCount}` : null,
        ],
      )

      await client.query("COMMIT")
      console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${importedCount} —Ç–æ–≤–∞—Ä–æ–≤, –æ—à–∏–±–æ–∫: ${errorCount}`)

      return { imported: importedCount, errors: errorCount }
    } catch (error) {
      await client.query("ROLLBACK")
      console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:", error.message)

      // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
      await client.query(
        `
        INSERT INTO import_logs (filename, products_imported, status, error_message)
        VALUES ($1, $2, $3, $4)
      `,
        [filename, 0, "error", error.message],
      )

      throw error
    } finally {
      client.release()
    }
  }

  async moveProcessedFile(filename) {
    try {
      const oldPath = `${this.config.directory}/${filename}`
      const newPath = `${this.config.directory}/processed_${Date.now()}_${filename}`

      await this.client.rename(oldPath, newPath)
      console.log(`üìÅ –§–∞–π–ª ${filename} –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ`)
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${filename}:`, error.message)
    }
  }

  async syncProducts() {
    const connected = await this.connect()
    if (!connected) return false

    try {
      const files = await this.checkForNewFiles()

      for (const file of files) {
        console.log(`üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: ${file.name}`)

        const localPath = await this.downloadFile(file.name)
        if (localPath) {
          const products = await this.parseXMLFile(localPath)

          if (products.length > 0) {
            await this.saveProductsToDatabase(products, file.name)
            await this.moveProcessedFile(file.name)
          }

          // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
          fs.unlinkSync(localPath)
        }
      }

      return true
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:", error.message)
      return false
    } finally {
      this.client.close()
    }
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ FTP –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function getFTPSettings() {
  try {
    const client = await pool.connect()
    const result = await client.query("SELECT * FROM ftp_settings ORDER BY id DESC LIMIT 1")
    client.release()

    if (result.rows.length > 0) {
      const settings = result.rows[0]
      return {
        host: settings.host,
        port: settings.port,
        username: settings.username,
        password: settings.password_encrypted, // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –Ω—É–∂–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å
        directory: settings.directory,
      }
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ FTP:", error.message)
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  return {
    host: process.env.FTP_HOST || "localhost",
    port: Number.parseInt(process.env.FTP_PORT) || 21,
    username: process.env.FTP_USER || "apelsin_ftp",
    password: process.env.FTP_PASSWORD || "",
    directory: process.env.FTP_DIRECTORY || "/xml_uploads",
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log("üöÄ –ó–∞–ø—É—Å–∫ FTP —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")

  const ftpConfig = await getFTPSettings()
  const sync = new FTPSync(ftpConfig)

  await sync.syncProducts()

  console.log("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
}

// –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
if (process.env.NODE_ENV === "production") {
  setInterval(main, 5 * 60 * 1000)
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
main()

export default FTPSync
